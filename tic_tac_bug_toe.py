'''A buggy Tic-Tac-Toe game that provides an opportunity to debug code by both reasoning about it and stepping through it in a debugger.

The program has a number of bugs that are introduced one at a time. The goal is to find and fix the bugs.

Ensure you step through this program in an IDE debugger and pdb to understand how the program works and to find the bugs.'''

# A buggy Tic-Tac-Toe game partially generated by ChatGPT-4
class Main():
    def __init__(self) -> None:
        """
        Purpose
        =======
        Initialise empty board with 3x3 board

        Returns
        -------
        None

        Examples
        --------
        .. code-block:: python

            > [[" ", " ", " "],
            >  [" ", " ", " "],
            >  [" ", " ", " "]]

        """
        self.board = [[' ' for _ in range(3)] for _ in range(3)]

    def game_over(self, results) -> str:
        """
        Purpose
        =======
        Game over checks by list of 'results'

        Parameters
        ----------
        results: list
            This is storing true of win numbers

        Returns
        -------
        Single 'string'

        Examples
        --------
        .. code-block:: python

            >>> print(game_over(results))
            Thank you for playing
            Number of wins during the game: 0

        """
        return f"""\nThank you for playing\nNumber of wins during the game: {self.tally_wins(results)}"""

    def reset_board(self, board) -> None:
        """
        Purpose
        =======
        Empty all cells data

        Parameters
        ----------
        board: 2D list
            Main game board

        Examples
        --------
        board = [[" ", " ", " "], [" ", " ", " "], [" ", " ", " "]]
        """
        for row in range(len(board)):
            for col in range(len(board)):
                board[row][col] = " "

    def reset_move(self) -> int:
        """
        Purpose
        =======
        Reset moves number to 0

        Returns
        -------
        int: 0

        Examples
        --------
        .. code-block:: python

            >>> moves = reset_move()
            0
        """
        return 0

    def play_again(self, msg) -> bool:
        """
        Purpose
        =======
        Ask the user to play one more time

        Parameters
        ----------
        msg: string
            This parameter value will pass to print statement
        
        Returns
        -------
        bool: True or False depending on input

        Examples
        --------
        .. code-block:: python

            >>> play_again("Hello World")
            Hello World Y or N: 
            >>> play_again("Do you want play again?")
            Do you want Play again Y or N:

        """
        again = input(f"{msg} Y or N: ")
        if "Y" == str(again).upper():
            return True
        return False

    def print_board(self) -> None:
        """
        Purpose
        =======
        Display game's board

        Examples
        --------

            >  | | 
            > -----
            >  | | 
            > -----
            >  | | 
            > -----
        """
        for row in self.board:
            print('|'.join(row))
            print('-' * 5)

    def is_draw(self, board) -> bool:
        """
        Purpose
        =======
        Check the game is draw or not
        and print 'msg' with return value

        Parameters
        ----------
        board: 2D list
            Main game board
        
        Returns
        -------
        Bool value 'True' or 'False'

        Examples
        --------
        .. code-block:: python

            >>> is_draw(board)
            T|T|T
            -----
            T|T|T
            -----
            T|T|T
            -----
            It's a draw!
        """
        if self.check_draw(board):
            self.print_board()
            print("It's a draw!")
            return True
        return False

    def check_draw(self, board) -> bool:
        """
        Purpose
        =======
        Return there is a empty cell or not

        Parameters
        ----------
        board: 2D list
            Main game board

        Return
        ------
        Bool type: True or False

        Examples
        --------
        .. code-block:: python

            >>> check_draw(board)
            True # If there is no empty slot
            False # If empty slot exist

        """
        for row in range(len(board)):
            for col in range(len(board)):
                if board[row][col] == " ":
                    return False
        return True

    def print_board(self) -> None:
        """
        Purpose
        =======
        Display game's board

        Examples
        --------

            >  | | 
            > -----
            >  | | 
            > -----
            >  | | 
            > -----
        """
        for row in self.board:
            print('|'.join(row))
            print('-' * 5)


    def is_win(self, player) -> bool:
        """
        Purpose
        =======
        Checking win condition

        Parameters
        ----------
        player: string
            player's symbol
        
        Returns
        -------
        bool value: True or False

        Example
        -------
        .. code-block:: python

            >>> is_win(player)
            True # if any condition is True
            False # None of conditions are matched

        """
        '''Check rows, columns, and diagonals for win condition for a given player'''
        for i in range(3):
            if all([cell == player for cell in self.board[i]]):  # Rows
                return True 
            if all([self.board[j][i] == player for j in range(3)]):  # Columns
                return True
        if self.board[0][0] == self.board[1][1] == self.board[2][2] == player or \
        self.board[0][2] == self.board[1][1] == self.board[2][0] == player:  # Diagonals 
            return True
        return False





    def tally_wins(self, results) -> int:
        """
        Purpose
        =======
        Return a int depending on how many times win

        Parameters
        ----------
        results: list
            holding bool depending on win previously

        Return
        ------
        int: True is 1 and False is 0, and sum up all numbers in list then return total

        Example
        -------
        .. code-block:: python

            >>> tally_wins(results) # if the list hold 'True' and 'True'
            2 # True(1) + True(1) = 2
        """
        # Leveraging the fact that in Python: True = 1 and False = 0 
        # we can use sum() to count the number of wins by counting all Trues and False
        return sum(results)


    def start(self) -> None:
        """
        Purpose
        =======
        This is main game loop, HAVE FUN! 😁
        """
        current_player = 'X'
        moves = 0
        results = []

        # test_draw(board)
        while moves <= 9:
            try: 
                draw = self.is_draw(self.board)
                if draw:
                    again = self.play_again("Do you want Play again?")
                    if again == True:
                        self.reset_board(self.board)
                        moves = self.reset_move()
                        continue
                    else:
                        break
                self.print_board()
                # ChatGPT chose an unusual way to implement this. `map` applies the function int to each element split out of the input string.
                # Note that list comprehensions are more Pythonic, easier to read, and in recent versions of Python, faster.
                row, col = map(int, input(f"Player {current_player}, enter row and column (0-2) separated by space: ").split())
                if self.board[row][col] == ' ':
                    self.board[row][col] = current_player
                    win = self.is_win(current_player)
                    results.append(win)
                    if win:
                        self.print_board()
                        print(f"Player {current_player} wins!")
                        again = self.play_again("Do you want Play again?")
                        if again == True:
                            self.reset_board(self.board)
                            moves = self.reset_move()
                        else:
                            break
                    current_player = 'O' if current_player == 'X' else 'X'  # Switch player
                    moves += 1
                else:
                    print("Cell already occupied! Try again.")
            except:
                print("invalid input try again")
        
        print(self.game_over(results))
        
if __name__ == "__main__":
    game = Main()
    game.start()
